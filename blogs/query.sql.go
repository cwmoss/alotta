// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package blogs

import (
	"context"
	"database/sql"
)

const createBlog = `-- name: CreateBlog :one
INSERT INTO
    blogs (title, content, created_at)
VALUES
    (?, ?, DateTime ('now')) RETURNING id, title, content, created_at, modified_at
`

type CreateBlogParams struct {
	Title   sql.NullString
	Content sql.NullString
}

func (q *Queries) CreateBlog(ctx context.Context, arg CreateBlogParams) (Blog, error) {
	row := q.db.QueryRowContext(ctx, createBlog, arg.Title, arg.Content)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM blogs
WHERE
    id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getBlog = `-- name: GetBlog :one
SELECT
    id, title, content, created_at, modified_at
FROM
    blogs
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetBlog(ctx context.Context, id int64) (Blog, error) {
	row := q.db.QueryRowContext(ctx, getBlog, id)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const listBlogs = `-- name: ListBlogs :many
SELECT
    id, title, content, created_at, modified_at
FROM
    blogs
ORDER BY
    created_at DESC
`

func (q *Queries) ListBlogs(ctx context.Context) ([]Blog, error) {
	rows, err := q.db.QueryContext(ctx, listBlogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBlog = `-- name: UpdateBlog :exec
UPDATE blogs
set
    title = ?,
    content = ?
WHERE
    id = ?
`

type UpdateBlogParams struct {
	Title   sql.NullString
	Content sql.NullString
	ID      int64
}

func (q *Queries) UpdateBlog(ctx context.Context, arg UpdateBlogParams) error {
	_, err := q.db.ExecContext(ctx, updateBlog, arg.Title, arg.Content, arg.ID)
	return err
}
